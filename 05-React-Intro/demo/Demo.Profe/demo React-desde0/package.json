{
  "name": "demo-react-desde0",
  "version": "1.0.0",
  "description": "Puntos fuertes en relación a otros como Angular (creado por google) o Vue\r - Es más flexible que los frameworks como Angular o Vue\r - El manejo de los estados y ciclo de vida es más evidente y comprensible\r - Trabajar con components es Unidireccionalidad de los datos (One-way data binding): En React, los datos fluyen en una sola dirección, desde el componente principal hacia los componentes secundarios. Esto hace que sea más fácil rastrear el flujo de datos y entender cómo los cambios en el estado afectan a la interfaz de usuario.\r - Es declarativa\r - El STATE es un {} del component de React\r - Usa un Virtual DOM para ser matchear exactamente solo lo que debe cambiar\r - Usamos Components en React. De clase (con this y props por defecto) y Funcionales\r - Principio de responsabilidad única\r - JSX <-> Extensión -> de buena práctica para los components",
  "main": "guie.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "react-scripts start",
    "build": "webpack"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "^5.0.1"
  },
  "devDependencies": {
    "@babel/core": "^7.23.3",
    "@babel/preset-env": "^7.23.3",
    "@babel/preset-react": "^7.23.3",
    "babel-loader": "^9.1.3",
    "webpack": "^5.89.0",
    "webpack-cli": "^5.1.4"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
